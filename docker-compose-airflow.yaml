version: '3'
x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: ./etl/Dockerfile
  env_file: ./.env
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 10
  volumes:
    - ./training/utils.py:/opt/airflow/dags/repo/utils.py
    - ./training/orm.py:/opt/airflow/dags/repo/orm.py
    - ./etl/dags:/opt/airflow/dags
    - ./etl/logs:/opt/airflow/logs
    - ./etl/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    postgres:
      condition: service_healthy


services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always


  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

  app:
    build: ./serving
    restart: unless-stopped
    container_name: app
    env_file:
      - .env
    ports:
      - 8000:8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:8000"]
    volumes:
      - ./training/artifacts:/mlops/artifacts/
    depends_on:
      mlflow:
        condition: service_started
      mysql:
        condition: service_started


  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    container_name: prometheus
    ports:
      - 9090:9090
    depends_on:
      app:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:9090"]
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"


  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    user: "472"
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources/
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards/
    env_file:
      - ./monitoring/grafana/config.monitoring


  mysql:
    image: mysql:8.0
    cap_add:
      - SYS_NICE
    restart: always
    container_name: mysql
    ports:
      - "3306:3306"

    healthcheck:
        test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
        timeout: 20s
        retries: 10
    # env_file:
    #   - .env
    environment:
      - MYSQL_DATABASE=${MYSQL_DB}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PWD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PWD}
    volumes:
      - mysql_db:/var/lib/mysql

  mlflow:
    restart: always
    build: ./training
    image: atcommons/mlflow-server
    container_name: mlflow
    env_file:
      - .env
    ports:
      - "5000:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:5000"]
    depends_on:
      mysql_mlflow:
        condition: service_healthy
    command: mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri mysql+pymysql://${MYSQL_MLFLOW_USER}:${MYSQL_MLFLOW_PWD}@mysql_mlflow:3306/${MYSQL_MLFLOW_DB} --default-artifact-root ${MLFLOW_ARTIFACT_ROOT}
    # command: mlflow server --backend-store-uri=sqlite:///artifacts.db --default-artifact-root=file:training/artifacts --host 0.0.0.0 --port 5000


  mysql_mlflow:
    image: mysql:8.0
    container_name: mysql_mlflow
    # env_file:
    #   - .env
    environment:
      - MYSQL_DATABASE=${MYSQL_MLFLOW_DB}
      - MYSQL_USER=${MYSQL_MLFLOW_USER}
      - MYSQL_PASSWORD=${MYSQL_MLFLOW_PWD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_MLFLOW_ROOT_PWD}
    # ports:
    #   - "3306:3306"
    healthcheck:
        test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
        timeout: 20s
        retries: 10
    restart: always
    volumes:
      - mysql_mlflow_db:/var/lib/mysql
    cap_add:
      - SYS_NICE


volumes:
  mysql_db:
  mysql_mlflow_db:
  postgres-db-volume:
